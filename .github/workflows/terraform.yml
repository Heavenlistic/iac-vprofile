name: Vprofile IAC

on:
  push:
    branches:
      - main
      - stage
    paths:
      - terraform/**
  pull_request:
    branches:
      - main
    paths:
      - terraform/**

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_REGION: us-east-1
  EKS_CLUSTER: vprofile-eks

jobs:
  terraform:
    name: "Terraform Workflow"
    runs-on: ubuntu-latest
    
    defaults: 
      run:
        shell: bash
        working-directory: ./terraform
        
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.7

      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ env.BUCKET_TF_STATE }}"

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      # Delete EKS Node Groups before destroying the cluster
      - name: Delete EKS Node Groups
        run: |
          NODEGROUPS=$(aws eks list-nodegroups --cluster-name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }} --query 'nodegroups' --output text)
          if [ -n "$NODEGROUPS" ]; then
            for NODEGROUP in $NODEGROUPS; do
              aws eks delete-nodegroup --cluster-name ${{ env.EKS_CLUSTER }} --nodegroup-name $NODEGROUP --region ${{ env.AWS_REGION }}
              echo "Deleting node group $NODEGROUP"
              aws eks wait nodegroup-deleted --cluster-name ${{ env.EKS_CLUSTER }} --nodegroup-name $NODEGROUP --region ${{ env.AWS_REGION }}
            done
          fi

      # Sleep for 60 seconds to ensure AWS propagates the node group deletion
      - name: Wait for Node Group Deletion to Propagate
        run: sleep 60

      # Destroy all resources
      - name: Terraform Destroy
        run: terraform destroy -no-color -input=false -auto-approve
##